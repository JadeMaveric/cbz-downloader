#!/bin/bash

### mfcom Usage:help
#
# MangaFox Compiler
#
# Get all pages from a MangaFox commic to a local directory
#
# USAGE
#
# 	mfcom URL [ START [[+]END] ]
#
# Specify the URL of the main manga page
#
# Optionally specify the start chapter
#
# Optionally specify the end chapter, or a "+" followed by the number of chapters to download
#
# CONFIGURATION
#
# Set the following environment variables to configure mfcom:
#
# MFCOM_UAGENT="<user agent string>"
# 	set a custom user agent string instead of the default (Mozilla 52)
#
# MFCOM_MAKE_ARCHIVE={pdf | cbz}
# 	tries to compile to PDF or CBZ comic archive
#
# 	PDF requires img2pdf (apt install img2pdf)
# 	CBZ requires zip     (apt install zip)
#
# MFCOM_WAIT=<int>
# 	time in seconds to wait between operations ; default is 1
# 	mangafox seems to throttle access from IPs that download too much too fast
# 	set to 0 for no delay
#
# MFCOM_NOEXIT=<bool>
# 	whether or not to exit after a failure, or keep going; default is false (will exit on failure)
#
# MFCOM_CHTRIES=<int>
# 	how many times to try downloading a chapter that has errors; default 1
# 	requires MFCOM_NOEXIT=true to perform more than one retry attempt
#
###/doc

set -euo pipefail

SURLFILE="source.url"
LASTINDEXFILE="last-tried.txt"

### runmain SCRIPTNAME FUNCTION [ARGUMENTS ...] Usage:bbuild
#
# Runs the function FUNCTION with ARGUMENTS, only if the runtime
# name of the script matches SCRIPTNAME
#
# This allows you include a main-like function in your library
# that only runs if you use your lib as an executabl itself.
#
# For example, an image archiver could be:
#
# 	function archive_images {
# 		tar czf "$1.tgz" "$@"
# 	}
#
# 	runmain archiveimages.sh archive_images "$@"
#
# When included a different script, the runmain call does not fire the lib's function
#
# If the lib is compiled/made executable, and named "archiveimages.sh", the function runs.
#
# This is similar to `if __name__ == "__main__"` clauses in python
#
###/doc

function runmain {
	local required_name="$1"; shift
	local funcall="$1"; shift
	local scriptname="$(basename "$0")"

	if [[ "$required_name" = "$scriptname" ]]; then
		"$funcall" "$@"
	fi
}
#!/bin/bash

#!/bin/bash

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour"
#
# Colours available:
#
# CDEF -- switches to the terminal default
#
# CRED, CBRED -- red, bold red
# CGRN, CBGRN -- green, bold green
# CYEL, CBYEL -- yellow, bold yellow
# CBLU, CBBLU -- blue, bold blue
# CPUR, CBPUR -- purple, bold purple
#
###/doc

export CRED="\033[0;31m"
export CGRN="\033[0;32m"
export CYEL="\033[0;33m"
export CBLU="\033[0;34m"
export CPUR="\033[0;35m"
export CBRED="\033[1;31m"
export CBGRN="\033[1;32m"
export CBYEL="\033[1;33m"
export CBBLU="\033[1;34m"
export CBPUR="\033[1;35m"
export CDEF="\033[0m"

### Console output handlers Usage:bbuild
#
# Write data to console stderr using colouring
#
###/doc

### Environment Variables Usage:bbuild
#
# MODE_DEBUG : set to 'true' to enable debugging output
# MODE_DEBUG_VERBOSE : set to 'true' to enable command echoing
#
###/doc

: ${MODE_DEBUG=false}
: ${MODE_DEBUG_VERBOSE=false}

### out:debug MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "true"
###/doc
function out:debug {
	if [[ "$MODE_DEBUG" = true ]]; then
		echo -e "${CBBLU}DEBUG:$CBLU$*$CDEF" 1>&2
	fi
}

### out:info MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function out:info {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### out:warn MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function out:warn {
	echo -e "${CBYEL}WARN:$CYEL $*$CDEF" 1>&2
}

### out:fail [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function out:fail {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift
	fi

	echo -e "${CBRED}ERROR FAIL:$CRED$*$CDEF" 1>&2
	exit $ERCODE
}

### out:dump Usage:bbuild
#
# Dump stdin contents to console stderr. Requires debug mode.
#
# Example
#
# 	action_command 2>&1 | out:dump
#
###/doc

function out:dump {
	echo -e -n "${CBPUR}$*" 1>&2
	echo -e -n "$CPUR" 1>&2
	cat - 1>&2
	echo -e -n "$CDEF" 1>&2
}

### out:break MESSAGE Usage:bbuild
#
# Add break points to a script
#
# Requires debug mode set to true
#
# When the script runs, the message is printed with a propmt, and execution pauses.
#
# Type `exit`, `quit` or `stop` to stop the program. If the breakpoint is in a subshell,
#  execution from after the subshell will be resumed.
#
# Press return to continue execution.
#
###/doc

function out:break {
	[[ "$MODE_DEBUG" = true ]] || return

	read -p "${CRED}BREAKPOINT: $* >$CDEF " >&2
	if [[ "$REPLY" =~ quit|exit|stop ]]; then
		out:fail "ABORT"
	fi
}

[[ "$MODE_DEBUG_VERBOSE" = true ]] && set -x || :
#!/bin/bash

### autohelp:print Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from a running script, call the
# `autohelp:print` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
# You can set a different comment character by setting the 'HELPCHAR' environment variable:
#
# 	HELPCHAR=%
# 	autohelp:print
#
# You can set a different help section by specifying the 'SECTION_STRING' variable
#
# 	SECTION_STRING=subsection autohelp:print
#
###/doc

HELPCHAR='#'

function autohelp:print {
	local SECTION_STRING="${1:-}"; shift
	local TARGETFILE="${1:-}"; shift
	[[ -n "$SECTION_STRING" ]] || SECTION_STRING=help
	[[ -n "$TARGETFILE" ]] || TARGETFILE="$0"

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s+(.+?)\s+Usage:'"$SECTION_STRING"'\s*$'
        local SECEND='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s*/doc\s*$'
        local insec=false

        while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        insec=true
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"

                elif [[ "$insec" = true ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                insec=false
                        else
				echo "$secline" | sed -r "s/^\s*$HELPCHAR//g"
                        fi
                fi
        done < "$TARGETFILE"

        if [[ "$insec" = true ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
        fi
	echo ""
}

### automatic help Usage:main
#
# automatically call help if "--help" is detected in arguments
#
###/doc
if [[ "$*" =~ --help ]]; then
	cols="$(tput cols)"
	autohelp:print | fold -w "$cols" -s || autohelp:print
	exit 0
fi
#!/bin/bash

### Varify Usage:bbuild
# Make a string into a valid variable name or file name
#
# Collapses any string of invalid characters into a single underscore
#
# For example
#
# 	varify:var "http://example.com"
#
# returns
#
# 	http_example.com
#
###/doc

### varify:var Usage:bbuild
#
# Valid characters for varify:var are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
###/doc
function varify:var {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_]/_/g'
}

### varify:fil Usage:bbuild
#
# Valid characters for varify:fil are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
# * dash ("-")
# * period (".")
#
# Can be used to produce filenames.
#
###/doc
function varify:fil {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_.-]/_/g'
}
#!/bin/bash

### comicarchive Usage:help
#
#	comicarchive { cbz | pdf } COMICFOLDER
#	make_archive:main { cbz | pdf } COMICFOLDER
#
# When run as standalone, the comicarchive command/subroutine turns a folder of
#
# 	chapter_X/page_*
#
# into a single chapter_X.pdf or chapter_X.cbz
#
# Set NOREMOVE=true to prevent removeal of original files
#
# Set NOERMOVE=false to remove files after archive is made
#
###/doc

#!/bin/bash

### bincheck:get COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	bincheck:get markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

bincheck:get() {
	local BINEXE=
	for binname in "$@"; do
		# Some implementations of `which` print error messages
		# Not useful here.
		BINEXE=$(which "$binname" 2>/dev/null)

		if [[ -n "$BINEXE" ]]; then
			echo "$BINEXE"
			return 0
		fi
	done
	return 1
}

### bincheck:has NAMES ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

bincheck:has() {
	[[ -n "$(bincheck:get "$@")" ]]
}

### bincheck:path NAME Usage:bbuild
#
# Determine the actual path to the command
#
# Relative paths are not expanded.
#
###/doc

bincheck:path() {
	local binname="$1"; shift

	[[ "$binname" =~ / ]] && { 
		# A relative path cannot be resolved, just check existence
		[[ -e "$binname" ]] && echo "$binname" || return 1

	} || binname="$(which "$binname" 2>/dev/null)"

	# `which` failed
	[[ -n "$binname" ]] || return 1

	[[ -h "$binname" ]] && {

		local pointedname="$(ls -l "$binname"|grep -oP "$binname.+"|sed "s|$binname -> ||")"
		bincheck:path "$pointedname" ; return "$?"
	
	} || echo "$binname"
}

#!/bin/bash

### abspath Usage:bbuild
# Returns the absolute path of a file/directory
#
# Exposes two functions
#
#     abspath:path
#     abspath:simple
#
# Do not use the python-based 'abspath:path' for intensitve resolution;
# instead, use native 'abspath:simple' which is at least 170 times
# more efficient, at the cost of perhaps being potentially
# dumber (simply collapses '/./' and '/../').
# 
# Neither utility expands softlinks.
#
# If python is not found, abspath:path falls back to abspath:simple systematically.
###/doc

function abspath:path {
	local newvar=${1//"'"/"\\'"}
	(
		set +eu
		if which python >/dev/null 2>&1; then
			python  -c "import os ; print os.path.abspath('$newvar')"
		elif which python3 >/dev/null 2>&1 ; then
			python3 -c "import os ; print(os.path.abspath('$newvar') )"
		else
			abspath:simple "$newvar"
		fi
	)
}

# More efficient by a factor of at least 170:1
# compared to spinning up a python process every time
function abspath:simple {
	local workpath="$1"
	if [[ "${workpath:0:1}" != "/" ]]; then workpath="$PWD/$workpath"; fi
	for x in {1..50}; do # set a limit on how many iterations - only very stupid paths will get us here.
		if [[ "$workpath" =~ '/../' ]] || [[ "$workpath" =~ '/./' ]]; then
			workpath="$(echo "$workpath"|sed -r -e 's#/./#/#g' -e 's#([^/]+)/../#\1/#g' -e 's#/.$##' -e 's#([^/]+)/..$#\1#' )"
		else
			echo "$workpath"
			return 0
		fi
	done
	return 1 # hopefully we never get here
}

make_archive:remove() {
	local targetdir="$1"; shift
	[[ "${NOREMOVE:-}" = true ]] || { cd ..; rm -r "$targetdir" ; }
}

make_archive:pdf() {
	local targetdir="$(abspath:path "$1")"; shift
	local archivename="$targetdir.pdf"

	if bincheck:has img2pdf; then
		(
		cd "$targetdir/"
		img2pdf -o "$archivename" page_* && {
			cd ..
			make_archive:remove "$targetdir"
		}
		)
	else
		out:warn "'img2pdf' command not installed"
	fi
}

make_archive:cbz() {
	local targetdir="$(abspath:path "$1")"; shift
	local archivename="$targetdir.cbz"

	if bincheck:has zip; then
		(
		# Comic book archives need a special comic book reader
		#  but they are recognized by eBook readers, and can be unpacked
		#  since they're literally a ZIP file
		#  and displayed in name order
		cd "$targetdir/"
		zip "$archivename" $(echo page_*) && {
			cd ..
			make_archive:remove "$targetdir"
		}
		)
	else
		out:warn "'zip' command not installed"
	fi
}

make_archive:main() {
	local archivetype="$1"; shift
	local targetdir="$1"; shift

	case "$archivetype" in
	pdf)
		make_archive:pdf "$targetdir"
		;;
	cbz)
		make_archive:cbz "$targetdir"
		;;
	*)
		out:fail "Wrong archive type name [$archivetype] - choose 'cbz' or 'pdf'"
		;;
	esac
}

if [[ -z "${NOREMOVE:-}" ]]; then
	NOREMOVE=false
fi

runmain comicarchive make_archive:main "$@"

# FIXME - set function signature in head of help
### searchpaths:file_from PATHDEF FILE Usage:bbuild
#
# Locate a file along a search path.
#
# EXAMPLE
#
# The following will look for each of the files
#  in order of preference of a local lib directory, a profile-wide one, then a system-
#  wide one.
#
#	MYPATH="./lib:$HOME/.local/lib:/usr/local/lib"
# 	searchpaths:file_from "$MYPATH" file
#
# Echoes the path of the first file found.
#
# Returns 1 on failure to find any file.
#
###/doc

function searchpaths:file_from {
	local PATHS="$1"; shift
	local FILE="$1"; shift

	out:debug "Looking for file [$FILE] amongst [$PATHS]"

	for path in $(echo "$PATHS"|tr ':' ' '); do
		out:debug "Try path: $path"
		local fpath="$path/$FILE"
		if [[ -f "$fpath" ]]; then
			echo "$fpath"
			return
		else
			out:debug "No $fpath"
		fi
	done
	return 1
}

wgetdl() {
	local downloadfile="$1"; shift
	if [[ -z "$*" ]]; then
		out:warn "Nothing specified for $downloadfile"
		return 404
	fi

	wget --header="User-Agent: $MFCOM_UAGENT" --header="Accept: text/html, image/*" --quiet -O "$downloadfile" --no-check-certificate "$@" || :
	do_unzip "$downloadfile"
}

get_mainList() {
	wgetdl "$F_MAIN" "$U_MAINPAGE"
}

extract_links() {
	local sourcefile="$1"; shift
	local targetfile="$1"; shift

	grep "$U_MAINPAGE_NOSCHEME" "$sourcefile" | \
		grep -Po 'a href="'"$U_MAINPAGE_NOSCHEME"'.*?"' | \
		grep -Po "$U_MAINPAGE_NOSCHEME[^\"]+" | \
		sed -r 's|^|http:|' | tac \
		> "$targetfile"
}

exit_on_fail() {
	[[ "${MFCOM_NOEXIT:-}" != true ]]
}

unzero() {
        local unzeroed="$(echo "$1"|sed -r s/^0+//)"
        if [[ -z "$unzeroed" ]]; then
                echo "0"
        else
                echo "$unzeroed"
        fi
}

is_bigger_or_eq() {
	[[ ! $(dc -e "$1 $2 - p") =~ - ]] || return 1
}

is_smaller() {
	! is_bigger_or_eq "$1" "$2"
}

do_unzip() {
	if (file "$1"|grep gzip -q); then
		mv "$1" "$1.gz"
		gunzip "$1.gz"
	fi
}

set_image_extension() {
	local imagefile="$1"; shift
	local typestring="$(file "$imagefile")"
	local imagetype="$(echo "$typestring"|egrep -oi 'jpeg|jpg|png|gif' | tr '[:upper:]' '[:lower:]')"
	local extension=bin

	out:debug "Renaming $imagefile"

	case "$imagetype" in
		jpeg|jpg)
			extension=jpg ;;
		png|gif)
			extension="$imagetype" ;;
		*)
			out:warn "Could not determine extension for [$imagefile] : $typestring)"
			out:debug "    (using $noimgf instead)"
			rm "$imagefile" 2>/dev/null || :
			cp "$noimgf" "${imagefile}.png"
			return ;;
	esac

	mv "$imagefile" "$imagefile.$extension"

	lastextension="$extension"
}

download_chapter_page() {
	local pageurl="$1"; shift
	local targetdir="$1"; shift
	local pagename="$1"; shift
	local max_attempts="$1"; shift # For another time...

	local targetfile="$targetdir/$pagename"
	local datafile="$targetdir/pagedata.html"

	out:info "Download [$pageurl] to [$targetfile]"

	wgetdl "$datafile" "$pageurl" || {
		out:warn "Page not found"
		return 1
	}

	local imgurl="$(grep '<img' "$datafile"|grep 'id="image"'|grep -oP 'src="[^"]+')"

	out:debug "Cutting $imgurl"

	imgurl="${imgurl:5}"

	out:debug "$imgurl : $targetfile"
	wgetdl "$targetfile" "$imgurl" || {
		out:warn "Image not found [$imgurl] from [$datafile]"
		return 2
	}
	set_image_extension "$targetfile"
}

padnum() {
	printf "%03d" "$1"
}

download_chapter() {
	local chapter_url="$1"; shift
	local base_url="$(dirname "$chapter_url")"
	local targetdir="$1"; shift
	local chapnum="$1"; shift

	targetdir="$targetdir/${D_TARGET}-${chapnum}"

	local dlfile="$targetdir/fpage.html"
	local chapdir="$(basename "$targetdir")"

	mkdir -p "$targetdir"

	# Register the last attempt now, in case fail before end
	echo "$chapnum" > "$F_LASTDONE"

	wgetdl "$dlfile" "$chapter_url"

	local pagecount="$(grep -oP 'of\s*\d+' "$dlfile"|sort|uniq|cut -d' ' -f2)"

	out:info "$pagecount pages to download for chapter $chapnum"

	local retries=0
	while [[ "$retries" -lt "${MFCOM_CHTRIES:-1}" ]]; do
		retries="$((retries + 1))"
		local i=0
		while [[ "$i" -lt "$pagecount" ]]; do
			i=$((i+1))
			download_chapter_page "$base_url/$i.html" "$targetdir" "page_$(padnum "$i")" 2 || {
				if exit_on_fail ; then
					out:fail "Abort. Set MFCOM_NOEXIT=true to avoid exiting on page failure."
				fi
				break
			}
			sleep "$MFCOM_WAIT"
		done
		if [[ "$i" != "$pagecount" ]]; then
			out:warn "Chapter retries: MFCOM_CHTRIES=${MFCOM_CHTRIES:-1}"
		else
			rm "$targetdir/pagedata.html" || :
			break
		fi
	done

	[[ "$i" -gt 0 ]] || {
		out:warn "Nothing downloaded !"
		rm -r "$targetdir"
		return
	}

	local archivename="$(varify:fil "$chapdir")"
	if [[ "${MFCOM_MAKE_ARCHIVE:-}" = pdf ]]; then
		make_archive:pdf "$targetdir"
	elif [[ "${MFCOM_MAKE_ARCHIVE:-}" = cbz ]]; then
		make_archive:cbz "$targetdir"
	fi
}

download_all_chapters() {
	local chapnum=0
	while read LINKLINE; do
		chappat="/c([0-9.]+)/?"
		[[ "$LINKLINE" =~ $chappat ]]
		chapnum="${BASH_REMATCH[1]}"
		if [[ -z "$chapnum" ]]; then
			out:warn "Could not extract chapter number from $LINKLINE"
			continue
		fi

		if [[ -n  "$STARTINDEX" ]]; then
			# chapter number < desired start index
			if is_smaller "$chapnum" "$STARTINDEX"; then continue; fi

			if [[ -n "$ENDINDEX" ]]; then
				# chapter number >= desired end index
				if is_bigger_or_eq "$chapnum" "$ENDINDEX" ; then break; fi
			fi
		fi
		
		download_chapter "$LINKLINE" "$D_TARGET" "${chapnum}"

	done < "$F_LINKS"
}

numcheck() {
	local tocheck="$1"; shift

	if [[ ! "$tocheck" =~ ^[0-9]*$ ]]; then
		out:fail "Invalid number: $*"
	fi
}

get_main_url() {
	U_MAINPAGE="$1"; shift

	if [[ -d "$U_MAINPAGE" ]] && [[ -f "$U_MAINPAGE/$SURLFILE" ]]; then
		U_MAINPAGE="$(cat "$U_MAINPAGE/$SURLFILE")"

	elif [[ ! "$U_MAINPAGE" =~ ^https?:// ]]; then
		out:fail "Invalid page URL $U_MAINPAGE"
	fi
}

set_indices() {
	STARTINDEX="${1:-}"
	ENDINDEX="${2:-}"

	[[ -n "$STARTINDEX" ]] || return 0

	numcheck "$STARTINDEX" start index

	[[ -n "$ENDINDEX" ]] || return 0

	if [[ "$ENDINDEX" =~ ^\+ ]]; then
		ENDINDEX="${ENDINDEX#+}"
		numcheck "$ENDINDEX" end index length
		ENDINDEX=$((STARTINDEX + ENDINDEX))
	else
		numcheck "$ENDINDEX" end index
		is_smaller "$STARTINDEX" "$ENDINDEX" || out:fail "Start index must be smaller than end index"
	fi
}

setup_configuration() {
	# Mangafox has started generating urls without schemes
	U_MAINPAGE_NOSCHEME="$(echo "$U_MAINPAGE"|sed -r 's|https?://|//|')"

	set_indices "${1:-}" "${2:-}"

	D_TARGET="$(varify:fil "${U_MAINPAGE##*/manga/}")"
	D_TARGET="${D_TARGET%_}"
	F_MAIN="$D_TARGET/frontpage.html"
	F_LINKS="$D_TARGET/links.txt"
	F_SOURCEURL="$D_TARGET/$SURLFILE"
	F_LASTDONE="$D_TARGET/$LASTINDEXFILE"

	mkdir -p "$D_TARGET"

	[[ -f "$F_SOURCEURL" ]] || echo "$U_MAINPAGE" > "$F_SOURCEURL"
	[[ -z "$STARTINDEX" ]] && [[ -f "$F_LASTDONE" ]] && STARTINDEX="$(cat "$F_LASTDONE")" || :
}

announce_setup() {
	echo "MFCOM_WAIT=$MFCOM_WAIT"
	echo "MFCOM_MAKE_ARCHIVE=${MFCOM_MAKE_ARCHIVE:-}"
	echo "Downloading from: $U_MAINPAGE"
	echo "Downloading to:   $D_TARGET"
	echo "Starting at: $STARTINDEX"
	echo "Ending at:   $ENDINDEX"
	sleep 2
}

get_noimg() {
	local nilplaces
	nilplaces="$HOME/.local/lib/mfcom:/usr/local/lib/mfcom"
	noimgf="$(searchpaths:file_from "$nilplaces" none.png)"

	[[ -n "$noimgf" ]] || out:fail "Could not find nil image none.png amongst [$nilplaces]"
}

main() {
	if [[ -z "$*" ]]; then
		autohelp:print
		exit
	fi

	: ${MFCOM_UAGENT="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"}

	: ${MFCOM_WAIT=2}

	get_noimg

	get_main_url "$1"; shift
	setup_configuration "${1:-}" "${2:-}"
	shift 2 || :

	announce_setup

	get_mainList
	extract_links "$F_MAIN" "$F_LINKS"
	download_all_chapters
}

runmain mfcom main "$@"

