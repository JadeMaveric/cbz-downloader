#!/bin/bash

### mfcom Usage:help
#
# MangaFox Compiler
#
# Get all pages from a MangaFox commic to a local directory
#
# USAGE
#
# 	mfcom URL [ START [[+]END] ]
#
# Specify the URL of the main manga page
#
# Optionally specify the start chapter
#
# Optionally specify the end chapter, or a "+" followed by the number of chapters to download
#
# CONFIGURATION
#
# Set the following environment variables to configure mfcom:
#
# MFCOM_UAGENT="<user agent string>"
# 	set a custom user agent string instead of the default (Mozilla 52)
#
# MFCOM_MAKE_ARCHIVE={pdf | cbz}
# 	tries to compile to PDF or CBZ comic archive
#
# 	PDF requires img2pdf (apt install img2pdf)
# 	CBZ requires zip     (apt install zip)
#
# MFCOM_WAIT=<int>
# 	time in seconds to wait between operations ; default is 1
# 	mangafox seems to throttle access from IPs that download too much too fast
# 	set to 0 for no delay
#
###/doc

set -euo pipefail

SURLFILE="source.url"
LASTINDEXFILE="last-tried.txt"

### Helper for version management Usage:bbuild
# Requires a version.bbuild in the current directory to work
###/doc

#%VERSIONFILE
BBVERSION_MAJOR=0
BBVERSION_MINOR=0
BBVERSION_POINT=0
BBVERSION_FLAG=release
BBVERSION_PROGRAM=mfcom
BBVERSION_BUILDDATE=2017-12-02
BBVERSION_BUILD=45

function bbns_version_infoe {
	type infoe 2>&1|if grep 'not found' -q; then
		echo "$*"
	else
		infoe "$*"
	fi
}

function bbns_version_showversion {
	bbns_version_infoe "$BBVERSION_PROGRAM : $(bbns_version_genversion)"
	exit
}

function bbns_version_genversion {
	echo "$BBVERSION_MAJOR.$BBVERSION_MINOR.$BBVERSION_POINT ($BBVERSION_FLAG build $BBVERSION_BUILD) $BBVERSION_BUILDDATE"
}

if [[ "$*" =~ --version ]]; then
	bbns_version_showversion
fi
### notest FUNCTION ARGUMENTS Usage:bbuild
#
# This function performs a simple test to see if the "BBSETTESTMODE" variable is set to the string "test mode"
#
# If so, it does NOT call the function. In all other cases, the function is called with the arguments.
#
# The purpose of this function is to allow a simple method to encourage testability: source notest.sh in your test script, and set the BBTESTMODE variable to "test mode" to prevent the script from running.
#
# Example test target script, "test_target.sh":
#
#	#%include notest.sh
#
# 	function action1 { ... }
#
# 	function action2 { ... }
#
# 	function main {
# 		action1
# 		action2
# 	}
#
# 	notest main "$@"
#
# Example test script:
#
# 	. ~/.local/lib/bbuild/notest.sh
# 	BBTESTMODE="test mode"
#
# 	# main will not run
# 	. test_target.sh
#
# 	action1 || echo failed action1
#
# 	action2 || echo failed action2
#
# You can source a file with this kind of structure without the risk of triggering its runtime. This allows the file to be sourced and tested safely.
#
###/doc

function notest {
	local funcall="$1"; shift

	if [[ "${BBTESTMODE:-}" != "test mode" ]]; then
		"$funcall" "$@"
	fi
}
#!/bin/bash


MODE_DEBUG=no
MODE_DEBUG_VERBOSE=no

### debuge MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "yes"
###/doc
function debuge {
	if [[ "$MODE_DEBUG" = yes ]]; then
		echo -e "${CBBLU}DEBUG:$CBLU$*$CDEF" 1>&2
	fi
}

### infoe MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function infoe {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### warne MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function warne {
	echo -e "${CBYEL}WARN:$CYEL $*$CDEF" 1>&2
}

### faile [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function faile {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift
	fi

	echo "${CBRED}ERROR FAIL:$CRED$*$CDEF" 1>&2
	exit $ERCODE
}

function dumpe {
	echo -n "[1;35m$*" 1>&2
	echo -n "[0;35m" 1>&2
	cat - 1>&2
	echo -n "[0m" 1>&2
}

function breake {
	if [[ "$MODE_DEBUG" != yes ]]; then
		return
	fi

	read -p "${CRED}BREAKPOINT: $* >$CDEF " >&2
	if [[ "$REPLY" =~ $(echo 'quit|exit|stop') ]]; then
		faile "ABORT"
	fi
}

### Auto debug Usage:main
# When included, bashout processes a special "--debug" flag
#
# It does not remove the debug flag from arguments.
###/doc

if [[ "$*" =~ --debug ]]; then
	MODE_DEBUG=yes

	if [[ "$MODE_DEBUG_VERBOSE" = yes ]]; then
		set -x
	fi
fi
#!/bin/bash

### printhelp Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from a running script, call the
# `printhelp` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
###/doc

CHAR='#'

function printhelp {
	local USAGESTRING=help
	local TARGETFILE=$0
	if [[ -n "$*" ]]; then USAGESTRING="$1" ; shift; fi
	if [[ -n "$*" ]]; then TARGETFILE="$1" ; shift; fi

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$CHAR$CHAR$CHAR"'\s+(.+?)\s+Usage:'"$USAGESTRING"'\s*$'
        local SECEND='^\s*'"$CHAR$CHAR$CHAR"'\s*/doc\s*$'
        local insec="$(mktemp --tmpdir)"; rm "$insec"
        cat "$TARGETFILE" | while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        touch "$insec"
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"
                elif [[ -f $insec ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                rm "$insec"
                        else
				echo "$secline" | sed -r "s/^\s*$CHAR//g"
                        fi
                fi
        done
        if [[ -f "$insec" ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
		rm "$insec"
        fi
	echo ""
}

### automatic help Usage:main
#
# automatically call help if "--help" is detected in arguments
#
###/doc
if [[ "$@" =~ --help ]]; then
	cols="$(tput cols)"
	printhelp | fold -w "$cols" -s
	exit 0
fi
#!/bin/bash

### Varify Usage:bbuild
# Make a string into a valid variable name or file name
#
# Replaces any string of invalid characters into a "_"
#
# Valid characters for varify_var are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
#
# Valid characters for varify_fil are as above, plus:
#
# * dash ("-")
# * period (".")
#
# Can be used to produce filenames.
###/doc

function varify_var {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_]/_/g'
}

function varify_fil {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_.-]/_/g'
}
#!/bin/bash

### getbin COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	getbin markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

function getbin {
	local BINEXE=
	for binname in "$@"; do
		# Some implementations of `which` print error messages
		# Not useful here.
		BINEXE=$(which "$binname" 2>/dev/null)

		if [[ -n "$BINEXE" ]]; then
			echo "$BINEXE"
			return 0
		fi
	done
	return 1
}

### hasbin COMMANDS ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

function hasbin {
	[[ -n "$(getbin "$@")" ]]
}
#!/bin/bash

### comicarchive Usage:help
#
# When run as standalone, the comicarchive command/subroutine turns a folder of
#
# 	chapter_X/page_*
#
# into a single chapter_X.pdf or chpater_X.cbz
#
# Set NOREMOVE=true to prevent removeal of original files
#
# Set NOERMOVE=false to remove files after archive is made
#
###/doc

#!/bin/bash

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour"
#
# Colours available:
#
# CDEF -- switches to the terminal default
#
# CRED, CBRED -- red and bright/bold red
# CGRN, CBGRN -- green and bright/bold green
# CYEL, CBYEL -- yellow and bright/bold yellow
# CBLU, CBBLU -- blue and bright/bold blue
# CPUR, CBPUR -- purple and bright/bold purple
#
###/doc

export CRED="[31m"
export CGRN="[32m"
export CYEL="[33m"
export CBLU="[34m"
export CPUR="[35m"
export CBRED="[1;31m"
export CBGRN="[1;32m"
export CBYEL="[1;33m"
export CBBLU="[1;34m"
export CBPUR="[1;35m"
export CDEF="[0m"
#!/bin/bash

### abspath Usage:bbuild
# Returns the absolute path of a file/directory
#
# Exposes two functions
#
#     abspath
#     abspath_collapse
#
# Do not use the python-based 'abspath' for intensitve resolution;
# instead, use native 'abspath_collapse' which is at least 170 times
# more efficient, at the cost of perhaps being potentially
# dumber (simply collapses '/./' and '/../').
# 
# Neither utility expands softlinks.
#
# If python is not found, abspath falls back to abspath_collapse systematically.
###/doc

function abspath {
	local newvar=${1//"'"/"\\'"}
	(
		set +eu
		if which python >/dev/null 2>&1; then
			python  -c "import os ; print os.path.abspath('$newvar')"
		elif which python3 >/dev/null 2>&1 ; then
			python3 -c "import os ; print(os.path.abspath('$newvar') )"
		else
			abspath_collapse "$newvar"
		fi
	)
}

# More efficient by a factor of at least 170:1
# compared to spinning up a python process every time
function abspath_collapse {
	local workpath="$1"
	if [[ "${workpath:0:1}" != "/" ]]; then workpath="$PWD/$workpath"; fi
	for x in {1..50}; do # set a limit on how many iterations - only very stupid paths will get us here.
		if [[ "$workpath" =~ '/../' ]] || [[ "$workpath" =~ '/./' ]]; then
			workpath="$(echo "$workpath"|sed -r -e 's#/./#/#g' -e 's#([^/]+)/../#\1/#g' -e 's#/.$##' -e 's#([^/]+)/..$#\1#' )"
		else
			echo "$workpath"
			return 0
		fi
	done
	return 1 # hopefully we never get here
}

make_archive:remove() {
	local targetdir="$1"; shift
	[[ "${NOREMOVE:-}" = true ]] || { cd ..; rm -r "$targetdir" ; }
}

make_archive:pdf() {
	local targetdir="$(abspath "$1")"; shift
	local archivename="$targetdir.pdf"

	if hasbin img2pdf; then
		(
		cd "$targetdir/"
		img2pdf -o "$archivename" page_* && {
			cd ..
			make_archive:remove "$targetdir"
		}
		)
	else
		warne "'img2pdf' command not installed"
	fi
}

make_archive:cbz() {
	local targetdir="$(abspath "$1")"; shift
	local archivename="$targetdir.cbz"

	if hasbin zip; then
		(
		# Comic book archives need a special comic book reader
		#  but they are recognized by eBook readers, and can be unpacked
		#  since they're literally a ZIP file
		#  and displayed in name order
		cd "$targetdir/"
		zip "$archivename" page_* && {
			cd ..
			make_archive:remove "$targetdir"
		}
		)
	else
		warne "'zip' command not installed"
	fi
}

make_archive:main() {
	local archivetype="$1"; shift
	local targetdir="$1"; shift

	case "$archivetype" in
	pdf)
		make_archive:pdf "$targetdir"
		;;
	cbz)
		make_archive:cbz "$targetdir"
		;;
	*)
		faile "Wrong archive type name [$archivetype] - choose 'cbz' or 'pdf'"
		;;
	esac
}

if [[ "$(basename "$0")" = comicarchive ]]; then
	: ${NOREMOVE=true}
	make_archive:main "$@"
fi

wgetdl() {
	local downloadfile="$1"; shift
	if [[ -z "$*" ]]; then
		warne "Error downloading $downloadfile"
		return 404
	fi

	wget --header="User-Agent: $MFCOM_UAGENT" --header="Accept: text/html, image/*" --quiet -O "$downloadfile" --no-check-certificate "$@" || :
	do_unzip "$downloadfile"
}

get_mainList() {
	wgetdl "$F_MAIN" "$U_MAINPAGE"
}

extract_links() {
	local sourcefile="$1"; shift
	local targetfile="$1"; shift

	grep "$U_MAINPAGE_NOSCHEME" "$sourcefile" | \
		grep -Po 'a href="'"$U_MAINPAGE_NOSCHEME"'.*?"' | \
		grep -Po "$U_MAINPAGE_NOSCHEME[^\"]+" | \
		sed -r 's|^|http:|' | tac \
		> "$targetfile"
}

unzero() {
        local unzeroed="$(echo "$1"|sed -r s/^0+//)"
        if [[ -z "$unzeroed" ]]; then
                echo "0"
        else
                echo "$unzeroed"
        fi
}

is_bigger_or_eq() {
	[[ ! $(dc -e "$1 $2 - p") =~ - ]] || return 1
}

is_smaller() {
	! is_bigger_or_eq "$1" "$2"
}

do_unzip() {
	if (file "$1"|grep gzip -q); then
		mv "$1" "$1.gz"
		gunzip "$1.gz"
	fi
}

set_image_extension() {
	local imagefile="$1"; shift
	local imagetype="$(file "$imagefile"|egrep -oi 'jpeg|jpg|png|gif' | tr '[:upper:]' '[:lower:]')"
	local extension=bin

	debuge "Renaming $imagefile"

	case "$imagetype" in
		jpeg|jpg)
			extension=jpg ;;
		png|gif)
			extension="$imagetype" ;;
		*)
			warne "Could not determine extension for $imagefile"
			return ;;
	esac

	mv "$imagefile" "$imagefile.$extension"

	lastextension="$extension"
}

download_chapter_page() {
	local pageurl="$1"; shift
	local targetfile="$1"; shift

	infoe "Download [$pageurl] to [$targetfile]"

	wgetdl "$targetfile" "$pageurl"
	[[ "$?" = 404 ]] && faile 404 "Page not found"

	local imgurl="$(grep '<img' "$targetfile"|grep 'id="image"'|grep -oP 'src="[^"]+')"

	debuge "Cutting $imgurl"

	imgurl="${imgurl:5}"

	debuge "$imgurl : $targetfile"
	wgetdl "$targetfile" "$imgurl"
	[[ "$?" = 404 ]] && faile 404 "Image not found"
	set_image_extension "$targetfile"
}

padnum() {
	printf "%03d" "$1"
}

download_chapter() {
	local chapter_url="$1"; shift
	local base_url="$(dirname "$chapter_url")"
	local targetdir="$1"; shift
	local chapnum="$1"; shift

	targetdir="$targetdir/${D_TARGET}-${chapnum}"

	local dlfile="$targetdir/fpage.html"
	local chapdir="$(basename "$targetdir")"

	mkdir -p "$targetdir"

	# Register the last attempt now, in case fail before end
	echo "$chapnum" > "$F_LASTDONE"

	wgetdl "$dlfile" "$chapter_url"

	local pagecount="$(grep -oP 'of\s*\d+' "$dlfile"|sort|uniq|cut -d' ' -f2)"

	local i=0
	while [[ "$i" -lt "$pagecount" ]]; do
		i=$((i+1))
		download_chapter_page "$base_url/$i.html" "$targetdir/page_$(padnum "$i")"
		sleep "$MFCOM_WAIT"
	done

	local archivename="$(varify_fil "$chapdir")"
	if [[ "${MFCOM_MAKE_ARCHIVE:-}" = pdf ]]; then
		make_archive:pdf "$targetdir"
	elif [[ "${MFCOM_MAKE_ARCHIVE:-}" = cbz ]]; then
		make_archive:cbz "$targetdir"
	fi
}

download_all_chapters() {
	local chapnum=0
	while read LINKLINE; do
		chappat="/c([0-9.]+)/?"
		[[ "$LINKLINE" =~ $chappat ]]
		chapnum="${BASH_REMATCH[1]}"
		if [[ -z "$chapnum" ]]; then
			warne "Could not extract chapter number from $LINKLINE"
			continue
		fi

		if [[ -n  "$STARTINDEX" ]]; then
			# chapter number < desired start index
			if is_smaller "$chapnum" "$STARTINDEX"; then continue; fi

			if [[ -n "$ENDINDEX" ]]; then
				# chapter number >= desired end index
				if is_bigger_or_eq "$chapnum" "$ENDINDEX" ; then break; fi
			fi
		fi
		
		download_chapter "$LINKLINE" "$D_TARGET" "${chapnum}"

	done < "$F_LINKS"
}

numcheck() {
	local tocheck="$1"; shift

	if [[ ! "$tocheck" =~ ^[0-9]*$ ]]; then
		faile "Invalid number: $*"
	fi
}

get_main_url() {
	U_MAINPAGE="$1"; shift

	if [[ -d "$U_MAINPAGE" ]] && [[ -f "$U_MAINPAGE/$SURLFILE" ]]; then
		U_MAINPAGE="$(cat "$U_MAINPAGE/$SURLFILE")"

	elif [[ ! "$U_MAINPAGE" =~ ^https?:// ]]; then
		faile "Invalid page URL $U_MAINPAGE"
	fi
}

set_indices() {
	STARTINDEX="${1:-}"
	ENDINDEX="${2:-}"

	[[ -n "$STARTINDEX" ]] || return 0

	numcheck "$STARTINDEX" start index

	[[ -n "$ENDINDEX" ]] || return 0

	if [[ "$ENDINDEX" =~ ^\+ ]]; then
		ENDINDEX="${ENDINDEX#+}"
		numcheck "$ENDINDEX" end index length
		ENDINDEX=$((STARTINDEX + ENDINDEX))
	else
		numcheck "$ENDINDEX" end index
		is_smaller "$ENDINDEX" "$STARTINDEX" || faile "Start index must be smaller than end index"
	fi
}

setup_configuration() {
	# Mangafox has started generating urls without schemes
	U_MAINPAGE_NOSCHEME="$(echo "$U_MAINPAGE"|sed -r 's|https?://|//|')"

	set_indices "${1:-}" "${2:-}"

	D_TARGET="$(varify_fil "${U_MAINPAGE##*mangafox.me/manga/}")"
	D_TARGET="${D_TARGET%_}"
	F_MAIN="$D_TARGET/frontpage.html"
	F_LINKS="$D_TARGET/links.txt"
	F_SOURCEURL="$D_TARGET/$SURLFILE"
	F_LASTDONE="$D_TARGET/$LASTINDEXFILE"

	mkdir -p "$D_TARGET"

	[[ -f "$F_SOURCEURL" ]] || echo "$U_MAINPAGE" > "$F_SOURCEURL"
	[[ -z "$STARTINDEX" ]] && [[ -f "$F_LASTDONE" ]] && STARTINDEX="$(cat "$F_LASTDONE")" || :
}

announce_setup() {
	echo "MFCOM_WAIT=$MFCOM_WAIT"
	echo "MFCOM_MAKE_ARCHIVE=${MFCOM_MAKE_ARCHIVE:-}"
	echo "Downloading from: $U_MAINPAGE"
	echo "Downloading to:   $D_TARGET"
	echo "Starting at: $STARTINDEX"
	echo "Ending at:   $ENDINDEX"
	sleep 2
}

main() {
	if [[ -z "$*" ]]; then
		printhelp
		exit
	fi

	: ${MFCOM_UAGENT="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"}

	: ${MFCOM_WAIT=2}

	get_main_url "$1"; shift
	setup_configuration "${1:-}" "${2:-}"
	shift 2 || :

	announce_setup

	get_mainList
	extract_links "$F_MAIN" "$F_LINKS"
	download_all_chapters
}

notest main "$@"

