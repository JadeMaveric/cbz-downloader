#!/bin/bash

### TGZ to ZIP converter Uasge:help
#
# Convert a .tgz/.tar.gz file to a ZIP file
#
# By default, will not remove the tgz file ; set remove_after=true environment variable to remove the tgz on success
#
# By default, tries to detect and ".tar.gz" in the original filename; override this using the env variable ext_tgz
#
# By default, appends ".zip" to the destination filename; override this using the env variable ext_zip
#
#
# Example: converting tgz-based CBZ files to ZIP-based CBZ files:
#
# 	export ext_tgz=.cbz
# 	export ext_zip=.cbz
# 	export remove_after=true
# 	tgz-zip *.cbz
#
# Or, in one line:
#
# 	ext_tgz=.cbz ext_zip=.cbz remove_after=true tgz-zip *.cbz
#
###/doc

#%include autohelp.sh

set -euo pipefail

#%include abspath.sh

: ${ext_tgz=.tar.gz}
: ${ext_zip=.zip}

makezip() {
	local zipname="$1"; shift
	if [[ -e "$zipname" ]]; then
		zipname="${zipname}-2"
	fi

	# Initialize to avoid undefined variable
	local filearray=("$zipname")

	for x in * .*; do
		if [[ "$x" = . ]] || [[ "$x" = .. ]]; then continue; fi

		filearray=("${filearray[@]}" "$x")
	done

	zip -r "${filearray[@]}"
}

core_name() {
	local filename="$1"; shift

	filename="${filename%$ext_tgz}"

	echo "$filename"
}

main() {
	for item in "$@"; do
		local core_name="$(core_name "$item")"
		local filepath="$(abspath "$item")"
		local targetdir="$PWD"

		local opdir="$(mktemp -d)"

		# Unpack in temp, repack to destination
		pushd "$opdir"
		tar xzf "$filepath" && makezip "$targetdir/${core_name}$ext_zip" || { popd; continue; }

		# Cleanup
		popd
		rm -rf "$opdir"
		if [[ "${remove_after:-}" = true ]]; then
			rm "$filepath"
		fi

	done
}

main "$@"
