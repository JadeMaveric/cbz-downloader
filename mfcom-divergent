#!/bin/bash

### mfcom Usage:help
#
# MangaFox Compiler
#
# Get all pages from a MangaFox commic to a local directory
#
# USAGE
#
# 	mfcom URL [ START [END] ]
#
# Specify the URL of the main manga page
#
# Optionally specify the start chapter
#
# Optionally specify the end chapter
#
# CONFIGURATION
#
# Set the following environment variables to configure mfcom:
#
# MFCOM_UAGENT="<user agent string>"
# 	set a custom user agent string instead of the default (Mozilla 52)
#
# MFCOM_MAKE_ARCHIVE={pdf | cbz}
# 	tries to compile to PDF or CBZ comic archive
#
# 	PDF requires img2pdf
# 	CBZ requires zip
#
# MFCOM_WAIT=<int>
# 	time in seconds to wait between operations ; default is 1
# 	mangafox seems to throttle access from IPs that download too much too fast
# 	set to 0 for no delay
#
###/doc

set -euo pipefail

#%include version.sh notest.sh
#%include bashout.sh autohelp.sh varify.sh getbin.sh
#%include comicarchive

wgetdl() {
	local downloadfile="$1"; shift
	if [[ -z "$*" ]]; then
		warne "Error downloading $downloadfile"
		return 404
	fi

	wget --header="User-Agent: $MFCOM_UAGENT" --header="Accept: text/html, image/*" --quiet -O "$downloadfile" --no-check-certificate "$@" || :
	do_unzip "$downloadfile"
}

get_mainList() {
	wgetdl "$F_MAIN" "$U_MAINPAGE"
}

extract_links() {
	local sourcefile="$1"; shift
	local targetfile="$1"; shift

	grep "$U_MAINPAGE_NOSCHEME" "$sourcefile" | \
		grep -Po 'a href="'"$U_MAINPAGE_NOSCHEME"'.*?"' | \
		grep -Po "$U_MAINPAGE_NOSCHEME[^\"]+" | \
		sed -r 's|^|http:|' | tac \
		> "$targetfile"
}

unzero() {
        local unzeroed="$(echo "$1"|sed -r s/^0+//)"
        if [[ -z "$unzeroed" ]]; then
                echo "0"
        else
                echo "$unzeroed"
        fi
}

is_bigger_or_eq() {
	[[ ! $(dc -e "$1 $2 - p") =~ - ]] || return 1
}

is_smaller() {
	! is_bigger_or_eq "$1" "$2"
}

do_unzip() {
	if (file "$1"|grep gzip -q); then
		mv "$1" "$1.gz"
		gunzip "$1.gz"
	fi
}

set_image_extension() {
	local imagefile="$1"; shift
	local imagetype="$(file "$imagefile"|egrep -oi 'jpeg|jpg|png|gif' | tr '[:upper:]' '[:lower:]')"
	local extension=bin

	infoe "Renaming $imagefile"

	case "$imagetype" in
		jpeg|jpg)
			extension=jpg ;;
		png)
			extension=png ;;
		gif)
			extension=gif ;;
		*)
			warne "Could not determine extension for $imagefile"
			return ;;
	esac

	mv "$imagefile" "$imagefile.$extension"

	lastextension="$extension"
}

download_chapter_page() {
	local pageurl="$1"; shift
	local targetfile="$1"; shift

	wgetdl "$targetfile" "$pageurl"
	[[ "$?" = 404 ]] && return 404

	local imgurl="$(grep '<img' "$targetfile"|grep 'id="image"'|grep -oP 'src="[^"]+')"

	debuge "Cutting $imgurl"

	imgurl="${imgurl:5}"

	debuge "$imgurl : $targetfile"
	wgetdl "$targetfile" "$imgurl"
	[[ "$?" = 404 ]] && return 404
	set_image_extension "$targetfile"
}

padnum() {
	printf "%03d" "$1"
}

download_chapter() {
	local chapter_url="$1"; shift
	local base_url="$(dirname "$chapter_url")"
	local targetdir="$1"; shift
	local dlfile="$targetdir/fpage.html"
	local chapdir="$(basename "$targetdir")"

	mkdir -p "$targetdir"

	wgetdl "$dlfile" "$chapter_url"

	local pagecount="$(grep -oP 'of\s*\d+' "$dlfile"|sort|uniq|cut -d' ' -f2)"

	local i=0
	while [[ "$i" -lt "$pagecount" ]]; do
		i=$((i+1))
		download_chapter_page "$base_url/$i.html" "$targetdir/page_$(padnum "$i")"
		sleep "$MFCOM_WAIT"
	done

	local archivename="$(varify_fil "$chapdir")"
	if [[ "${MFCOM_MAKE_ARCHIVE:-}" = pdf ]]; then
		make_archive:pdf "$targetdir"
	elif [[ "${MFCOM_MAKE_ARCHIVE:-}" = cbz ]]; then
		make_archive:cbz "$targetdir"
	fi
}

download_all_chapters() {
	local chapnum=0
	while read LINKLINE; do
		chappat="/c([0-9.]+)/?"
		[[ "$LINKLINE" =~ $chappat ]]
		chapnum="${BASH_REMATCH[1]}"
		if [[ -z "$chapnum" ]]; then
			warne "Could not extract chapter number from $LINKLINE"
			continue
		fi

		if [[ -n  "$STARTINDEX" ]]; then
			# chapter number < desired start index
			if is_smaller "$chapnum" "$STARTINDEX"; then continue; fi

			if [[ -n "$ENDINDEX" ]]; then
				# chapter number >= desired end index
				if is_bigger_or_eq "$chapnum" "$ENDINDEX" ; then break; fi
			fi
		fi
		
		download_chapter "$LINKLINE" "$D_TARGET/chapter_${chapnum}"

	done < "$F_LINKS"
}

numcheck() {
	local tocheck="$1"; shift

	if [[ ! "$tocheck" =~ ^[0-9.]*$ ]]; then
		faile Invalid "$*"
	fi
}

set_indices() {
	STARTINDEX="${1:-}"
	ENDINDEX="${2:-}"

	numcheck "$STARTINDEX" start index

	if [[ "$ENDINDEX" =~ ^\+ ]]; then
		ENDINDEX="${ENDINDEX#+}"
		numcheck "$ENDINDEX" end index length
		ENDINDEX=$((STARTINDEX + ENDINDEX))
	else
		numcheck "$ENDINDEX" end index
	fi
}

load_stored_url() {
	# U_MAINPAGE can be an existing folder
	# In case the folder exists, but does not have the URL file
	if [[ -d "$U_MAINPAGE" ]] && [[ ! -f "$URLFILE" ]]; then
		faile "Folder [$U_MAINPAGE] has no stored URL."
	elif [[ -f "$URLFILE" ]]; then
		U_MAINPAGE="$(cat "$URLFILE")"
	elif [[ ! "$U_MAINPAGE" =~ ^https?:// ]]; then
		faile "Valid URL required instead of [$U_MAINPAGE]"
	fi
	
	# Mangafox has started generating urls without schemes
	U_MAINPAGE_NOSCHEME="$(echo "$U_MAINPAGE"|sed -r 's|https?://|//|')"
}

store_url() {
	[[ -f "$URLFILE" ]] || echo "$U_MAINPAGE" > "$URLFILE"
}

set_targets() {
	# Remove leading content before manga name
	D_TARGET="$(varify_fil "${U_MAINPAGE##*mangafox.me/manga/}")"

	# The final slash will have been turned into a '_', remove it
	D_TARGET="${D_TARGET%_}"

	F_MAIN="$D_TARGET/frontpage.html"
	F_LINKS="$D_TARGET/links.txt"

	mkdir -p "$D_TARGET"

	store_url
}

announce_config() {
	echo "MFCOM_WAIT=$MFCOM_WAIT"
	echo "MFCOM_MAKE_ARCHIVE=${MFCOM_MAKE_ARCHIVE:-}"
	echo "Downloading to: $D_TARGET"
	sleep 2
}

main() {
	if [[ -z "$*" ]]; then
		printhelp
		exit
	fi

	: ${MFCOM_UAGENT="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"}

	: ${MFCOM_WAIT=2}

	U_MAINPAGE="$1"; shift
	URLFILE="$U_MAINPAGE/url.txt"
	load_stored_url

	set_indices "$@"

	set_targets

	announce_config

	get_mainList
	extract_links "$F_MAIN" "$F_LINKS"
	download_all_chapters
}

notest main "$@"

